import com.sun.org.apache.xalan.internal.xsltc.cmdline.Compile

//Root project configuration

plugins {
	// description Web Application Deployments With Gradle - Benjamin Muschko
	// https://codehaus-cargo.github.io/cargo/Home.html
	//https://github.com/bmuschko/gradle-cargo-plugin/blob/master/README.md
	id "com.bmuschko.cargo" version "2.2.3"
	id "com.bmuschko.tomcat" version "2.2.5"
}

apply plugin: 'idea'

description = 'minimessage. Application like Twitter'

ext{
	gradleVersion = '3.4.1'
	javaVersion = '1.8.0_73'
	projectIds = ['group': 'ua.golovchenko.artem.minimessage', 'version': '1.0.0.SNAPSHOT']
	MySQLVersion = '6.0.6'
}
version = projectIds.version


allprojects{

	group = projectIds.group

	repositories {
		mavenLocal()
		mavenCentral()
	}

	gradle.projectsEvaluated {
		tasks.withType(Compile) {
			options.compilerArgs << "-Xlint:unchecked"
		}
	}

}


subprojects{

	apply plugin: 'java'
	apply plugin: "jacoco"

	sourceCompatibility = 1.8
	targetCompatibility = '1.8'

	ext{
		junitVersion = '4.12'
		mockitoVersion = '1.10.19'
		//springVersion = '3.0.5.RELEASE'
		springVersion = '3.1.2.RELEASE'
		jacocoVersion = '0.7.9'
		hibernateValidator = '5.4.1.Final'
	}


	sourceSets {
		test {
			resources {
				srcDirs = ['src/test/resources', 'src/test/java']
			}
		}
	}

	repositories {
		mavenCentral()
		jcenter()
	}

	dependencies {
		compile 'javax.inject:javax.inject:1'
		testCompile "junit:junit:$junitVersion"
		testCompile "org.mockito:mockito-all:$mockitoVersion"
		testCompile "org.springframework:spring-test:$springVersion"
	}


	jacoco {
		toolVersion = "${jacocoVersion}"
		//reportsDir = file("$buildDir/customJacocoReportDir")
	}

/*	test {
		jacoco {
			description = "exclude class"
			excludes = ['Go']
		}
	}*/

	jacocoTestReport {

		afterEvaluate {
			classDirectories = files(classDirectories.files.collect {
				fileTree(dir: it, exclude: ['**/Go.class','**/*Text*.class'])
			})
		}
	}

	jacocoTestReport.dependsOn(test)
	test.finalizedBy(project.tasks.jacocoTestReport)
	build.dependsOn(jacocoTestReport)


/* Addition settings for testing in footer
	Example
	--------------------------------------------------------------------
	|  Results: SUCCESS (1 tests, 1 successes, 0 failures, 0 skipped)  |
	--------------------------------------------------------------------
	*/
	tasks.withType(Test) {
		group ='testing'
		description= 'show addition information after all tests'

		testLogging {
			// set options for log level LIFECYCLE
			events "passed", "skipped", "failed", "standardOut"
			showExceptions true
			exceptionFormat "full"
			showCauses true
			showStackTraces true
			showStandardStreams = true

			// set options for log level DEBUG and INFO
			debug {
				events "started", "passed", "skipped", "failed", "standardOut", "standardError"
				exceptionFormat "full"
			}
			info.events = debug.events
			info.exceptionFormat = debug.exceptionFormat

			afterSuite { desc, result ->
				if (!desc.parent) { // will match the outermost suite
					def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
					def startItem = '|  ', endItem = '  |'
					def repeatLength = startItem.length() + output.length() + endItem.length()
					println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
				}
			}


		}
	}


/*	tasks.withType(Test) {
		group ='testing'
		description= 'https://discuss.gradle.org/t/jacoco-multiproject-build-cant-load-jacocoagent/11540/2'
		systemProperties = System.properties
		systemProperties['user.dir'] = workingDir
	}*/

}


project('minimessage-model'){
	version = '1.0.0.SNAPSHOT'
	description = 'Domain models'

dependencies{
	compile "javax.persistence:persistence-api:1.0"
	compile "javax.validation:validation-api:1.0.0.GA"

	// Add for testing Model Classes
	compile "org.springframework:spring-context:$springVersion"

}

}

project('minimessage-dao'){
	version = '1.0.0.SNAPSHOT'
	description = 'Databases access object classes'

	dependencies {
		compile project(':minimessage-model')
		compile "org.springframework:spring-jdbc:$springVersion"
		compile group: 'mysql', name: 'mysql-connector-java', version: "$MySQLVersion"
		compile group: 'org.springframework', name: 'spring-orm', version: "$springVersion"
		compile "org.hibernate:hibernate-core:3.3.2.GA"
		compile "org.hibernate:hibernate-annotations:3.4.0.GA"
		//compile "org.slf4j:slf4j-api:1.6.1"
		compile "org.slf4j:slf4j-api:1.5.8"
		compile "org.slf4j:slf4j-nop:1.5.8"
		compile "javassist:javassist:3.9.0.GA"
		compile group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.0-api', version: '1.0.1.Final'
		 /* For Testing DAO  */
		//testCompile group: 'org.hsqldb', name: 'hsqldb', version: '2.2.8'
		testCompile group: 'org.hsqldb', name: 'hsqldb', version: '2.3.4'
		testCompile group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4'
		testCompile group: 'cglib', name: 'cglib', version: '2.2.2'
		compile "org.springframework:spring-context:$springVersion"
		compile group: 'org.hibernate', name: 'hibernate-validator', version: "$hibernateValidator" //For Tomcat. add because have error when deploy on apache tomcat (on glassfish working without this library). http://stackoverflow.com/questions/9772608/validationexception-unable-to-find-a-default-provider
	}

}

project('minimessage-service'){
	version = '1.0.0.SNAPSHOT'
	description = 'Services'

	dependencies{
		compile project(':minimessage-model')
		compile project(':minimessage-dao')

		testCompile group: 'org.hsqldb', name: 'hsqldb', version: '2.3.4'
		testCompile group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4'
		testCompile group: 'cglib', name: 'cglib', version: '2.2.2'
		compile "org.springframework:spring-context:$springVersion"
	}


}

project('minimessage-web') {
	apply plugin: "jetty"
	apply plugin: 'project-report'
	apply plugin: 'com.bmuschko.tomcat'
	apply plugin: 'com.bmuschko.cargo'


	version = '1.0.0.SNAPSHOT'
	description = 'Minimessages Web'
	
	apply plugin: 'war'
	dependencies {
		compile project(':minimessage-model')
		//compile project(':minimessage-dao')
		compile project(':minimessage-service')
		compile "org.springframework:spring-webmvc:$springVersion"
		// https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api
		compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
		compile "org.apache.tiles:tiles-core:2.2.2"
		compile "org.apache.tiles:tiles-jsp:2.2.2"
		compile group: 'javax.servlet', name: 'jstl', version: '1.2'
		compile group: 'javax.servlet.jsp.jstl', name: 'jstl-api', version: '1.2' //for jstl/core & jstl/fmt
		compile "org.springframework.security:spring-security-taglibs:3.0.3.RELEASE"

		ext.cargoVersion = '1.6.2'
		cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
				"org.codehaus.cargo:cargo-ant:$cargoVersion"

	}


	cargo{
		containerId = 'tomcat9x'
		port = 8080

		remote{
			hostname = 'localhost'
			username = 'admin'
			password = 'admin'
		}
	}

}


task wrapper(type: Wrapper) {
	gradleVersion = '3.4.1'
}


